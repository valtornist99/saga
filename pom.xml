<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.microservices</groupId>
    <artifactId>choreography-orchestrator</artifactId>
    <version>0.1.0</version>

    <properties>
        <lombok.version>1.18.10</lombok.version>
        <modelmapper.version>2.3.5</modelmapper.version>
        <springfox-swagger2.version>2.9.2</springfox-swagger2.version>
        <springfox-swagger-ui.version>2.9.2</springfox-swagger-ui.version>
        <kafka-clients.version>2.5.0</kafka-clients.version>
        <micrometer-registry-prometheus.version>1.5.2</micrometer-registry-prometheus.version>
        <spring-boot-starter-web.version>2.3.1.RELEASE</spring-boot-starter-web.version>
        <spring-boot-starter-test.version>2.3.1.RELEASE</spring-boot-starter-test.version>
        <spring-boot-starter-data-neo4j.version>2.3.1.RELEASE</spring-boot-starter-data-neo4j.version>
        <validation-api.version>2.0.1.Final</validation-api.version>
        <org.springframework.boot.version>2.2.0.RELEASE</org.springframework.boot.version>
        <org.apache.maven.plugins.version>2.19.1</org.apache.maven.plugins.version>

        <buildnumber-maven-plugin.version>1.4</buildnumber-maven-plugin.version>
        <docker-maven-plugin.version>1.0.0</docker-maven-plugin.version>

        <!-- Существует переменная среды DOCKER_HOST, однако в ней помимо ip указан также порт и протокол.
        В данную переменную нужно скопировать только ip докер хоста -->
        <docker.ip>192.168.99.100</docker.ip>
    </properties>

    <!-- Нужен для buildnumber-maven-plugin. Необходимо указать адрес репозитория -->
    <scm>
        <connection>scm:git:https://https://github.com/microservices-course-itmo/saga.git</connection>
        <developerConnection>scm:git:https://https://github.com/microservices-course-itmo/saga.git</developerConnection>
        <tag>HEAD</tag>
        <url>https://https://github.com/microservices-course-itmo/saga.git</url>
    </scm>

    <dependencies>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
        </dependency>
        <dependency>
            <groupId>org.modelmapper</groupId>
            <artifactId>modelmapper</artifactId>
            <version>${modelmapper.version}</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>${springfox-swagger2.version}</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>${springfox-swagger-ui.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.kafka</groupId>
            <artifactId>kafka-clients</artifactId>
            <version>${kafka-clients.version}</version>
        </dependency>
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-registry-prometheus</artifactId>
            <version>${micrometer-registry-prometheus.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <version>${spring-boot-starter-web.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <version>${spring-boot-starter-test.version}</version>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-neo4j</artifactId>
            <version>${spring-boot-starter-data-neo4j.version}</version>
        </dependency>
        <dependency>
            <groupId>javax.validation</groupId>
            <artifactId>validation-api</artifactId>
            <version>${validation-api.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-dependencies-parent</artifactId>
            <version>2.3.0.RELEASE</version>
            <type>pom</type>
        </dependency>
    </dependencies>

    <build>
        <finalName>${project.artifactId}</finalName>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${org.springframework.boot.version}</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>11</source>
                    <target>11</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${org.apache.maven.plugins.version}</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.1.0</version>
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <classpathPrefix>lib/</classpathPrefix>
                            <mainClass>com.microservices.saga.choreography.supervisor.ChoreographyOrchestratorApplication</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>

            <!-- Нужен для определения текущей ветки(scmBranch) и хэша текущего коммита(buildNumber) -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>buildnumber-maven-plugin</artifactId>
                <version>${buildnumber-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <phase>validate</phase>
                        <goals>
                            <goal>create</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <doCheck>false</doCheck>
                    <doUpdate>false</doUpdate>
                </configuration>
            </plugin>
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>${docker-maven-plugin.version}</version>

                <configuration>

                    <image>${project.artifactId}</image>
                    <newName>${docker.ip}:5000/${scmBranch}_${project.version}</newName>

                    <imageName>${project.artifactId}</imageName>
                    <dockerDirectory>.</dockerDirectory>
                    <dockerHost>https://${docker.ip}:2376</dockerHost>
                    <dockerCertPath>${env.DOCKER_CERT_PATH}</dockerCertPath>
                    <resources>
                        <resource>
                            <directory>${project.build.directory}</directory>
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                </configuration>

                <executions>
                    <execution>
                        <id>docker image build</id>
                        <phase>deploy</phase>
                        <goals>
                            <goal>build</goal>
                            <goal>tag</goal>
                        </goals>
                    </execution>
                    <!--
                    push может быть осуществлен после запуска Docker Registry
                    <execution>
                        <configuration>
                            <imageName>${docker.ip}:5000/${scmBranch}_${project.version}</imageName>
                        </configuration>
                        <phase>deploy</phase>
                        <goals>
                            <goal>push</goal>
                        </goals>
                    </execution>
                    -->
                </executions>
            </plugin>

        </plugins>
    </build>
</project>